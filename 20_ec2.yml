AWSTemplateFormatVersion: '2010-09-09'
Description: ec2 configuration for webapp
Parameters:
  EnvironmentName:
    Description: An environment name like 'dev-myprj' that is prefixed to resource names.
    Type: String
  OS:
    Type: String
    Default: amzn2
    AllowedValues:
      - amzn2
      - ubuntu2004
      - windows2019base
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t3.small
    AllowedValues:
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  InstanceVolumeSize:
    Description: Instance volume size.
    Type: Number
    Default: 32
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 key pair to enable SSH access to the EC2 instances
  InstanceHostName:
    Description: An instance host name.
    Type: String
  InstanceSubnet:
    Description: Set instance on which subnet.
    Type: String
    Default: PUBLIC
    AllowedValues:
      - PUBLIC
      - PRIVATE

Mappings:
  OS2Image:
    ap-northeast-1:
      amzn2: ami-0ab0bbbd329f565e6
      ubuntu2004: ami-088da9557aae42f39
      windows2019base: ami-02812ebb523edc23a


Resources:
  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !ImportValue
          "Fn::Sub": '${EnvironmentName}-LOADBALANCER'
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: {'Fn::ImportValue': !Sub '${EnvironmentName}-CERTIFICATE'}
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref InstanceTargetGroup

  InstanceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-web-target
      VpcId: !ImportValue
        "Fn::Sub": '${EnvironmentName}-VPCID'
      Port: 80
      Protocol: HTTP
      Targets:
        - Id: !Ref Instance
          Port: 80

  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${InstanceHostName}-eip
      InstanceId: !Ref Instance

  Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - OS2Image
        - !Ref 'AWS::Region'
        - !Ref OS
      KeyName: !Ref KeyName
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !ImportValue
          "Fn::Sub": '${EnvironmentName}-APP-SECURITYGROUP'
      SubnetId: !Select
        - 0
        - !Split
          - ","
          - !ImportValue
            "Fn::Sub": '${EnvironmentName}-${InstanceSubnet}-SUBNETS'
      IamInstanceProfile: !Ref EC2InstanceProfile
      Monitoring: true
      Tags:
        - Key: Name
          Value: !Sub ${InstanceHostName}
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          VolumeSize: !Ref InstanceVolumeSize

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: !Sub ${EnvironmentName} ec2 web application iam role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonSESFullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      RoleName: !Sub ${EnvironmentName}-ec2-role

  EC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref EC2Role

  SSMEndpointSG: # for ssm login
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !ImportValue
        "Fn::Sub": '${EnvironmentName}-VPCID'
      GroupName: !Sub "${EnvironmentName}-ssm-endpoint-sg"
      GroupDescription: !Sub "${EnvironmentName}-ssm-endpoint-sg"

  SSMEndpointSGIngress: # for ssm login
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref SSMEndpointSG
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 10.0.0.0/16

  EC2MessageEndpoint: # for ssm login
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      VpcId: !ImportValue
        "Fn::Sub": '${EnvironmentName}-VPCID'
      SubnetIds: !Split
        - ","
        - !ImportValue
          "Fn::Sub": '${EnvironmentName}-PRIVATE-SUBNETS'
      SecurityGroupIds:
        - !Ref SSMEndpointSG

  SSMEndpoint: # for ssm login
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      VpcId: !ImportValue
        "Fn::Sub": '${EnvironmentName}-VPCID'
      SubnetIds: !Split
        - ","
        - !ImportValue
          "Fn::Sub": '${EnvironmentName}-PRIVATE-SUBNETS'
      SecurityGroupIds:
        - !Ref SSMEndpointSG

  SSMMessagesEndpoint: # for ssm login
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      VpcId: !ImportValue
        "Fn::Sub": '${EnvironmentName}-VPCID'
      SubnetIds: !Split
        - ","
        - !ImportValue
          "Fn::Sub": '${EnvironmentName}-PRIVATE-SUBNETS'
      SecurityGroupIds:
        - !Ref SSMEndpointSG


Outputs:
  Instance:
    Description: ec2 instance
    Value: !Ref Instance
  EIP:
    Description: elastic ip
    Value: !Ref EIP
  OS:
    Description: os
    Value: !Ref OS
  InstanceType:
    Description: instance type
    Value: !Ref InstanceType
  KeyName:
    Description: key name
    Value: !Ref KeyName
  EnvironmentName:
    Description: env
    Value: !Ref EnvironmentName
  InstanceSubnet:
    Description: instance subnet
    Value: !Ref InstanceSubnet
